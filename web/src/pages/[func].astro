---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { getCollection } from 'astro:content';
import { getFunctionInfo, parseFunctionSyntaxes } from '@src/utils/functions';
import { renderInlineMarkdown } from '@src/utils/general';
import { marked } from 'marked';
import fs from "fs";
import path from "path";
import { Code } from '@astrojs/starlight/components';

import NoteBox from '@src/components/NoteBox.astro';
import '@src/styles/function-page.css';
import type { NotesType } from '@src/utils/types';

export async function getStaticPaths() {
    const functions = await getCollection('functions');
    return functions.map(func => ({
        params: { func: func.id },
        props: { func },
    }));
}

const { func } = Astro.props;

const funcInfo = getFunctionInfo(func.data);
const funcType = funcInfo.type;
const funcPair = funcInfo.pair;
const funcPath = path.dirname(func.filePath ?? "");

const { description, notes: funcNotes, examples: rawExamples } = funcInfo;

let processedExamples: any[] = [];
if (Array.isArray(rawExamples) && rawExamples.length > 0) {
    processedExamples = rawExamples.map((example: any) => {
        try {
            const exampleFilePath = path.resolve(funcPath, example.path);
            const luaCode = fs.readFileSync(exampleFilePath, "utf8");
            return { ...example, luaCode };
        } catch (error) {
            console.error(`Error reading example file ${example.path} at ${path.resolve(funcPath, example.path)}:`, error);
            return { ...example, luaCode: `Error loading example: ${example.path}` };
        }
    });
}

let notesContent: NotesType = [];
if (Array.isArray(funcNotes) && funcNotes.length > 0) {
    notesContent = funcNotes;
}

let funcSyntaxes = parseFunctionSyntaxes(func.id, func.data);
---

<div class={"show-type-badge-" + funcType}>
    <StarlightPage frontmatter={{
        template: 'doc',
        title: func.id,
        tableOfContents: false,
    }}>
        <!-- Pair Function Ref -->
        {funcPair && (
            <p><strong>Pair:</strong> <a href={ `/${funcPair}` }>{ funcPair }</a></p>
        )}

        <!-- Description -->
        {description && <Fragment set:html={marked(description)} />}

        <!-- Notes -->
        {notesContent.length > 0 && (
            <div class="notes-section">
                {notesContent.map((note) => (
                    <NoteBox type={note.type}>
                        <Fragment set:html={marked(note.content)} />
                    </NoteBox>
                ))}
            </div>
        )}

        <!-- OOP Syntax -->
        {funcInfo.oop && (
        <>
            <h5>OOP Syntax <a class="small-text" href="/OOP_Introduction">Help! I don't understand this!</a></h5>
            <ul>
            {funcInfo.oop.method && (
                <li>
                <strong>Method:</strong>{' '}
                <a href={ `/${funcInfo.oop.entity}` }>{funcInfo.oop.entity}</a>{funcInfo.oop.static ? '.' : ':'}{funcInfo.oop.method}(...)
                </li>
            )}

            {funcInfo.oop.variable && (
                <li>
                <strong>Variable:</strong> .{funcInfo.oop.variable}
                </li>
            )}

            {funcInfo.oop.constructorclass && (
                <li>
                <strong>Constructor:</strong> {funcInfo.oop.constructorclass}(...)
                </li>
            )}
            
            {funcPair && (
            <li>
                <strong>Counterpart:</strong> <a href={ `/${funcPair}` }>{ funcPair }</a>
            </li>
            )}
            </ul>
        </>
        )}

        <!-- Syntaxes -->
        {funcSyntaxes.length > 0 && funcSyntaxes.map((syntax: any) => (
            <div class="function-syntax">
                {funcType === syntax.type && (
                    <h3>Syntax</h3>
                ) || (
                    <h3>{syntax.type.charAt(0).toUpperCase() + syntax.type.slice(1)} Syntax</h3>
                )}
                <Code code={syntax.syntaxString} lang="c" />
                {syntax.parameters.length > 0 && (
                <>
                    {syntax.parameters.some((param: any) => !param.default) && (
                    <>
                        <h5>Required Arguments</h5>
                        <ul>
                        {syntax.parameters
                            .filter((param: any) => !param.default)
                            .map((param: any) => (
                            <li
                                set:html={`<strong>${param.name}</strong>: ${renderInlineMarkdown(param.description)}`}
                            />
                            ))}
                        </ul>
                    </>
                    )}

                    {syntax.parameters.some((param: any) => param.default) && (
                    <>
                        <h5>Optional Arguments</h5>
                        <ul>
                        {syntax.parameters
                            .filter((param: any) => param.default)
                            .map((param: any) => (
                            <li
                                set:html={`<strong>${param.name}</strong>: ${renderInlineMarkdown(param.description)}`}
                            />
                            ))}
                        </ul>
                    </>
                    )}
                </>
                )}
                {syntax.returns && (
                    <h5>Returns</h5>
                    <ul>
                        {syntax.returns.values.map((ret: any) => (
                            <li set:html={"<strong>" + ret.type + "</strong>: " + renderInlineMarkdown(ret.name)} />
                        ))}
                    </ul>
                    <Fragment set:html={marked(syntax.returns.description)} />
                )}
            </div>
        ))}

        <!-- Examples -->
        {processedExamples.length > 0 && (
            <div class="examples-section">
                 <h3>Code Examples</h3>
                 {processedExamples.map((example: any) => (
                    <div class="function-example">
                        <Fragment set:html={marked(example.description)} />
                        <Code code={example.luaCode} lang="lua"/>
                    </div>
                ))}
            </div>
        )}
    </StarlightPage>
</div>